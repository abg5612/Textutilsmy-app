{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","onClick","togglemode","htmlFor","Textform","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","onChange","event","target","value","backgroundColor","rows","newText","toUpperCase","showAlert","newlowtext","toLowerCase","console","log","split","length","defaultProps","aboutproject","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setmode","_useState3","_useState4","setAlert","message","setTimeout","document","body","components_Alert","heading","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.357766ac.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\n// var projectname = \"Textutils\";\r\n// var title = \"This is Project\";\r\nexport default function Navbar(props) {\r\n    return (\r\n\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"/about\">About</a>\r\n                        </li> */}\r\n\r\n                    </ul>\r\n\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input\" type=\"checkbox\" onClick={props.togglemode} id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.mode === 'light' ? 'Enable Dark mode' : 'Enable light mode'}</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n     \r\n    )\r\n}\r\n\r\n\r\n// Types of props\r\n// If we define a string then we can only pass only string, if we pass a number, we will get a error in console.\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    aboutproject: PropTypes.string\r\n}\r\n\r\n// isRequired\r\n// if we use this type of props, then we have to definately pass a value either it will show error, but if we used default props and pass a value in defalut prop it will run safely.\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutproject: PropTypes.string.isRequired\r\n}\r\n\r\n\r\n// We can use default prop as default value, \r\n// if we forget or missed to return a prop value, then it will display default prop value\r\nNavbar.defaultProps = {\r\n    title: \"Set title here\",\r\n    aboutproject: \"Set About project here\"\r\n}\r\n\r\n","import React, { useState } from 'react'\r\n\r\nexport default function Textform(props) {\r\n\r\n    const handleupclick = () => {\r\n        // console.log(\"Upercase was Clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Text has been converted to uppercase\", \"success\");\r\n    }\r\n\r\n    const handleclear = () => {\r\n        let newText = \"\";\r\n        setText(newText);\r\n        console.log(\"this is will clear you text\");\r\n        props.showAlert(\"Text has been cleared\", \"success\");\r\n    }\r\n\r\n    const handledownclick = () => {\r\n        // console.log(\"Lowercase was Clicked\");\r\n        let newlowtext = text.toLowerCase();\r\n        setText(newlowtext);\r\n        props.showAlert(\"Text has been converted to lowercase\", \"success\");\r\n    }\r\n\r\n    const handleonchange = (event) => {\r\n        // console.log(\"handle on change\");\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const [text, setText] = useState(\"\");\r\n\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <div className=\"container\" style={{color: props.mode === 'dark'? 'white' : '#042743'}}>\r\n                <div className=\"form-floating\">\r\n                    <h1 style={{color: props.mode === 'dark'? 'white' : '#042743'}}>Analyze your text here</h1>\r\n                    <textarea className=\"form-control\" onChange={handleonchange}  style={{backgroundColor: props.mode === 'dark'? 'white' : '042743', \r\n                color: props.mode==='dark'?'black':'dark'}} id=\"myBox\" value={text} rows=\"8\"></textarea>\r\n                    <button className=\"btn btn-primary my-3\" onClick={handleupclick}> Convert to Uppercase</button>\r\n                    <button className=\"btn btn-primary mx-2\" onClick={handledownclick}> Convert to Lowercase</button>\r\n                    <button className=\"btn btn-primary mx-2\" onClick={handleclear}> Clear</button>\r\n                    {/* <button className=\"btn btn-primary mx-2\" onClick={handlecopy}>Copy Text</button> */}\r\n                </div>\r\n            </div>\r\n            </div>\r\n\r\n            <div className=\"container\" style={{color: props.mode === 'dark'? 'white' : '#042743'}}>\r\n                <h1>Your Text Summary</h1>\r\n                <p>{text.split(\" \").length} <b>Words</b> and {text.length} <b>Letters</b></p>\r\n                <p>{0.008 * text.split(\" \").length} <b>m/s Times, will take to read your all text.</b> </p>\r\n                <p> <b>Preview</b> <br /> {text.length > 0? text: \"Enter something in tect to preview\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\n function Alert(props) {\r\n    const capitalize =(word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1)\r\n    }\r\n    return (\r\n        props.alert &&   <div className={`alert alert-${props.alert.type} role=\"alert\" `}>\r\n                {capitalize (props.alert.type)}! {props.alert.msg}\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\n\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\n// import About from './components/About';\nimport React, {useState} from 'react';\nimport Alert from './components/Alert';\n\n\n// import {\n//   BrowserRouter,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode , setmode] = useState('light');\n const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert ( {\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n\n      \n  const togglemode = () => {\n    if (mode === 'light') {\n      setmode ('dark');\n    document.body.style.backgroundColor = '#042743'\n    showAlert(\"Dark mode has been enabled\", \"success\");\n    document.title = \"TextUtils Dark Mode\";\n    }\n    else {\n      setmode ('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtils Light Mode\";\n    }\n    \n    console.log(\"you are clicking a togglemode\");\n  }\n  return (\n    <>\n\n<Navbar title=\"Textutils\"  aboutproject=\"AboutTexutils\" mode = {mode} togglemode = {togglemode}     />\n<Alert alert={alert} />\n\n\n{/* <About />  */}\n <Textform showAlert={showAlert} heading=\"Enter the text to Analyze\" mode={mode}   /> \n\n {/* end imp's */}\n\n\n\n\n\n\n{/* <BrowserRouter>\n<Navbar title=\"Textutils\"  aboutproject=\"AboutTexutils\" mode = {mode} togglemode = {togglemode} />\n <Alert alert={alert} />\n          <Routes>\n            \n            <Route path=\"/\" element={<Textform showAlert={showAlert} mode={mode} heading=\"Enter the text to analyze below\"/>} />\n            <Route path=\"/about\" element={<About />}  />\n          </Routes> \n  \n  </BrowserRouter>  */}\n\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}